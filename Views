from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from .models import Account, Destination
from .serializers import AccountSerializer, DestinationSerializer
import requests

class AccountViewSet(viewsets.ModelViewSet):
    queryset = Account.objects.all()
    serializer_class = AccountSerializer

class DestinationViewSet(viewsets.ModelViewSet):
    queryset = Destination.objects.all()
    serializer_class = DestinationSerializer

@api_view(['POST'])
@permission_classes([AllowAny])
def data_handler(request):
    token = request.headers.get('CL-X-TOKEN')
    if not token:
        return Response({"error": "Missing CL-X-TOKEN header"}, status=status.HTTP_400_BAD_REQUEST)

    try:
        account = Account.objects.get(app_secret_token=token)
    except Account.DoesNotExist:
        return Response({"error": "Invalid token"}, status=status.HTTP_400_BAD_REQUEST)

    data = request.data
    destinations = account.destinations.all()
    
    for destination in destinations:
        headers = destination.headers
        if destination.http_method == 'GET':
            response = requests.get(destination.url, headers=headers, params=data)
        elif destination.http_method in ['POST', 'PUT']:
            response = requests.request(destination.http_method, destination.url, headers=headers, json=data)
        
        # Handle response if needed

    return Response({"status": "Data sent to destinations"}, status=status.HTTP_200_OK)
